// Background script cho Chrome extension - Ch·ªâ h·ªó tr·ª£ Gemini 2.0
class GeminiBackgroundService {
    constructor() {
        this.geminiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';
        this.setupEventListeners();
        this.initializeSettings();
    }

    setupEventListeners() {
        // Handle extension installation
        chrome.runtime.onInstalled.addListener((details) => {
            this.handleInstallation(details);
        });

        // Handle messages t·ª´ content scripts v√† popup
        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
            this.handleMessage(message, sender, sendResponse);
            return true; // Keep message channel open cho async response
        });

        // Handle context menu clicks
        chrome.contextMenus.onClicked.addListener((info, tab) => {
            this.handleContextMenuClick(info, tab);
        });

        // Handle tab updates
        chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
            if (changeInfo.status === 'complete' && tab.url) {
                this.handleTabUpdate(tabId, tab);
            }
        });
    }

    async initializeSettings() {
        try {
            const defaultSettings = {
                geminiApiKey: '',
                autoTranslate: false,
                showOriginal: false,
                sourceLanguage: 'auto',
                targetLanguage: 'vi'
            };

            const existingSettings = await chrome.storage.sync.get(Object.keys(defaultSettings));
            const settingsToSet = {};

            Object.keys(defaultSettings).forEach(key => {
                if (existingSettings[key] === undefined) {
                    settingsToSet[key] = defaultSettings[key];
                }
            });

            if (Object.keys(settingsToSet).length > 0) {
                await chrome.storage.sync.set(settingsToSet);
            }

            await this.createContextMenus();

        } catch (error) {
            console.error('Error initializing settings:', error);
        }
    }

    async createContextMenus() {
        try {
            await chrome.contextMenus.removeAll();

            chrome.contextMenus.create({
                id: 'translateImageGemini',
                title: 'D·ªãch ·∫£nh v·ªõi Gemini AI',
                contexts: ['image'],
                visible: true
            });

            chrome.contextMenus.create({
                id: 'toggleAutoTranslate',
                title: 'B·∫≠t/t·∫Øt t·ª± ƒë·ªông d·ªãch ·∫£nh',
                contexts: ['page'],
                visible: true
            });

            chrome.contextMenus.create({
                id: 'separator1',
                type: 'separator',
                contexts: ['image', 'page']
            });

            chrome.contextMenus.create({
                id: 'openExtensionPopup',
                title: 'M·ªü Image Translator',
                contexts: ['page'],
                visible: true
            });

        } catch (error) {
            console.error('Error creating context menus:', error);
        }
    }

    handleInstallation(details) {
        if (details.reason === 'install') {
            // T·∫°o tab welcome v·ªõi h∆∞·ªõng d·∫´n setup Gemini API
            chrome.tabs.create({
                url: 'data:text/html;charset=utf-8,' + encodeURIComponent(`
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Image Translator - Ch√†o m·ª´ng!</title>
                        <style>
                            body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; }
                            .header { text-align: center; color: #2c3e50; }
                            .step { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; }
                            .api-link { color: #3498db; text-decoration: none; font-weight: bold; }
                            .api-link:hover { text-decoration: underline; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Image Translator!</h1>
                            <p>Extension d·ªãch ·∫£nh b·∫±ng Google Gemini 2.0 Flash</p>
                        </div>
                        
                        <div class="step">
                            <h3>B∆∞·ªõc 1: L·∫•y API Key t·ª´ Google AI Studio</h3>
                            <p>1. Truy c·∫≠p <a href="https://aistudio.google.com/app/apikey" target="_blank" class="api-link">Google AI Studio</a></p>
                            <p>2. ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n Google</p>
                            <p>3. Nh·∫•n "Create API Key" v√† sao ch√©p key</p>
                        </div>
                        
                        <div class="step">
                            <h3>B∆∞·ªõc 2: C·∫•u h√¨nh Extension</h3>
                            <p>1. Nh·∫•n v√†o icon Extension tr√™n thanh c√¥ng c·ª•</p>
                            <p>2. D√°n API Key v√†o √¥ "C·∫•u h√¨nh API Key"</p>
                            <p>3. Nh·∫•n "Test API Key" ƒë·ªÉ ki·ªÉm tra</p>
                        </div>
                        
                        <div class="step">
                            <h3>B∆∞·ªõc 3: S·ª≠ d·ª•ng</h3>
                            <p>‚Ä¢ B·∫≠t "T·ª± ƒë·ªông d·ªãch ·∫£nh" ƒë·ªÉ d·ªãch t·∫•t c·∫£ ·∫£nh tr√™n trang</p>
                            <p>‚Ä¢ Ho·∫∑c t·∫£i ·∫£nh l√™n trong popup ƒë·ªÉ d·ªãch ri√™ng l·∫ª</p>
                            <p>‚Ä¢ Chu·ªôt ph·∫£i v√†o ·∫£nh ‚Üí "D·ªãch ·∫£nh v·ªõi Gemini AI"</p>
                        </div>
                    </body>
                    </html>
                `)
            });
        }
    }

    async handleMessage(message, sender, sendResponse) {
        try {
            switch (message.action) {
                case 'translateWithGemini':
                    const result = await this.translateWithGemini(message.text, message.sourceLang, message.targetLang, message.apiKey);
                    sendResponse({ success: true, translatedText: result });
                    break;

                case 'translateImageDirectly':
                    const imageResult = await this.translateImageWithGemini(
                        message.imageData,
                        message.sourceLang,
                        message.targetLang,
                        message.apiKey
                    );
                    sendResponse(imageResult);
                    break;

                case 'testGeminiConnection':
                    const testResult = await this.testGeminiConnection(message.apiKey);
                    sendResponse(testResult);
                    break;

                case 'getSettings':
                    const settings = await this.getSettings();
                    sendResponse({ success: true, settings });
                    break;

                case 'saveSettings':
                    await this.saveSettings(message.settings);
                    sendResponse({ success: true });
                    break;

                default:
                    sendResponse({ success: false, error: 'Unknown action: ' + message.action });
            }
        } catch (error) {
            console.error('Error handling message:', error);
            sendResponse({ success: false, error: error.message });
        }
    }

    async translateWithGemini(text, sourceLang, targetLang, apiKey) {
        if (!apiKey) {
            throw new Error('Kh√¥ng c√≥ API key');
        }

        const prompt = this.createTranslationPrompt(text, sourceLang, targetLang);

        try {
            const response = await fetch(`${this.geminiEndpoint}?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.1,
                        maxOutputTokens: 1000,
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error?.message || `HTTP ${response.status}`);
            }

            const data = await response.json();

            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Gemini kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá');
            }

            return data.candidates[0].content.parts[0].text.trim();

        } catch (error) {
            console.error('Gemini translation error:', error);
            throw error;
        }
    }

    async translateImageWithGemini(imageData, sourceLang, targetLang, apiKey) {
        if (!apiKey) {
            return { success: false, error: 'Kh√¥ng c√≥ API key' };
        }

        try {
            // Chuy·ªÉn ƒë·ªïi data URL th√†nh base64
            const base64Data = imageData.split(',')[1];

            const prompt = this.createImageTranslationPrompt(sourceLang, targetLang);

            const response = await fetch(`${this.geminiEndpoint}?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [
                            {
                                text: prompt
                            },
                            {
                                inline_data: {
                                    mime_type: "image/jpeg",
                                    data: base64Data
                                }
                            }
                        ]
                    }],
                    generationConfig: {
                        temperature: 0.1,
                        maxOutputTokens: 2000,
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error?.message || `HTTP ${response.status}`);
            }

            const data = await response.json();

            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Gemini kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá');
            }

            const result = data.candidates[0].content.parts[0].text;

            // Parse JSON response t·ª´ Gemini
            try {
                const parsedResult = JSON.parse(result);
                return {
                    success: true,
                    result: parsedResult
                };
            } catch (parseError) {
                // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, tr·∫£ v·ªÅ text th√¥
                return {
                    success: true,
                    result: {
                        texts: [{
                            original: "VƒÉn b·∫£n ƒë∆∞·ª£c t√¨m th·∫•y",
                            translated: result,
                            confidence: "medium",
                            orientation: "horizontal"
                        }]
                    }
                };
            }

        } catch (error) {
            console.error('Gemini image translation error:', error);
            return { success: false, error: error.message };
        }
    }

    createTranslationPrompt(text, sourceLang, targetLang) {
        const sourceLanguageName = this.getLanguageName(sourceLang);
        const targetLanguageName = this.getLanguageName(targetLang);

        return `D·ªãch vƒÉn b·∫£n sau t·ª´ ${sourceLanguageName} sang ${targetLanguageName}. Ch·ªâ tr·∫£ v·ªÅ b·∫£n d·ªãch, kh√¥ng gi·∫£i th√≠ch:

"${text}"`;
    }

    createImageTranslationPrompt(sourceLang, targetLang) {
        const sourceLanguageName = this.getLanguageName(sourceLang);
        const targetLanguageName = this.getLanguageName(targetLang);

        return `Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† t√¨m t·∫•t c·∫£ vƒÉn b·∫£n trong ·∫£nh. D·ªãch t·∫•t c·∫£ vƒÉn b·∫£n t·ª´ ${sourceLanguageName} sang ${targetLanguageName}.

Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c nh∆∞ sau:
{
  "texts": [
    {
      "original": "vƒÉn b·∫£n g·ªëc t√¨m th·∫•y",
      "translated": "b·∫£n d·ªãch ti·∫øng ${targetLanguageName}",
      "confidence": "high/medium/low",
      "orientation": "horizontal/vertical"
    }
  ]
}

L∆∞u √Ω:
- N·∫øu kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n n√†o, tr·∫£ v·ªÅ {"texts": []}
- D·ªãch ch√≠nh x√°c v√† t·ª± nhi√™n
- X√°c ƒë·ªãnh ƒë·ªô tin c·∫≠y: high (r·∫•t r√µ r√†ng), medium (kh√° r√µ), low (m·ªù/kh√≥ ƒë·ªçc)
- X√°c ƒë·ªãnh h∆∞·ªõng: horizontal (ngang), vertical (d·ªçc)`;
    }

    getLanguageName(langCode) {
        const langNames = {
            'auto': 't·ª± ƒë·ªông nh·∫≠n di·ªán',
            'vi': 'ti·∫øng Vi·ªát',
            'en': 'ti·∫øng Anh',
            'zh': 'ti·∫øng Trung',
            'ja': 'ti·∫øng Nh·∫≠t',
            'ko': 'ti·∫øng H√†n',
            'th': 'ti·∫øng Th√°i',
            'es': 'ti·∫øng T√¢y Ban Nha',
            'fr': 'ti·∫øng Ph√°p',
            'de': 'ti·∫øng ƒê·ª©c'
        };
        return langNames[langCode] || langCode;
    }

    async testGeminiConnection(apiKey) {
        try {
            const result = await this.translateWithGemini('Hello', 'en', 'vi', apiKey);
            return {
                success: true,
                message: 'API key ho·∫°t ƒë·ªông t·ªët!',
                testTranslation: result
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    async handleContextMenuClick(info, tab) {
        try {
            switch (info.menuItemId) {
                case 'translateImageGemini':
                    await this.translateImageFromContext(info, tab);
                    break;

                case 'toggleAutoTranslate':
                    await this.toggleAutoTranslateFromContext(tab);
                    break;

                case 'openSidePanel':
                    // M·ªü side panel
                    await chrome.sidePanel.open({ windowId: tab.windowId });
                    break;
            }
        } catch (error) {
            console.error('Error handling context menu click:', error);
        }
    }

    async translateImageFromContext(info, tab) {
        if (!info.srcUrl) return;

        const settings = await this.getSettings();
        if (!settings.geminiApiKey) {
            // Hi·ªÉn th·ªã notification y√™u c·∫ßu setup API key
            chrome.notifications.create({
                type: 'basic',
                iconUrl: 'icon48.png',
                title: 'Image Translator',
                message: 'Vui l√≤ng c·∫•u h√¨nh Gemini API key tr∆∞·ªõc khi s·ª≠ d·ª•ng!'
            });
            return;
        }

        await chrome.tabs.sendMessage(tab.id, {
            action: 'translateSpecificImage',
            imageUrl: info.srcUrl,
            apiKey: settings.geminiApiKey,
            sourceLang: settings.sourceLanguage,
            targetLang: settings.targetLanguage
        });
    }

    async toggleAutoTranslateFromContext(tab) {
        const settings = await this.getSettings();
        const newState = !settings.autoTranslate;

        await this.saveSettings({ ...settings, autoTranslate: newState });

        chrome.contextMenus.update('toggleAutoTranslate', {
            title: newState ? 'T·∫Øt t·ª± ƒë·ªông d·ªãch ·∫£nh' : 'B·∫≠t t·ª± ƒë·ªông d·ªãch ·∫£nh'
        });

        await chrome.tabs.sendMessage(tab.id, {
            action: 'toggleAutoTranslate',
            enabled: newState
        });
    }

    async handleTabUpdate(tabId, tab) {
        const settings = await this.getSettings();
        if (settings.autoTranslate && settings.geminiApiKey && tab.url && !tab.url.startsWith('chrome://')) {
            try {
                await chrome.tabs.sendMessage(tabId, { action: 'ping' });
            } catch {
                // Content script ch∆∞a ƒë∆∞·ª£c inject
                await chrome.scripting.executeScript({
                    target: { tabId },
                    files: ['content.js']
                });

                // Inject CSS
                await chrome.scripting.insertCSS({
                    target: { tabId },
                    files: ['content.css']
                });
            }
        }
    }

    async getSettings() {
        return await chrome.storage.sync.get({
            geminiApiKey: '',
            autoTranslate: false,
            showOriginal: false,
            sourceLanguage: 'auto',
            targetLanguage: 'vi'
        });
    }

    async saveSettings(settings) {
        await chrome.storage.sync.set(settings);

        // Notify t·∫•t c·∫£ tabs v·ªÅ settings change
        const tabs = await chrome.tabs.query({});
        const settingsMessage = {
            action: 'settingsChanged',
            settings: settings
        };

        for (const tab of tabs) {
            if (!tab.url || tab.url.startsWith('chrome://')) continue;
            try {
                await chrome.tabs.sendMessage(tab.id, settingsMessage);
            } catch {
                // Tab kh√¥ng c√≥ content script
            }
        }
    }
}

// Initialize background service
new GeminiBackgroundService();